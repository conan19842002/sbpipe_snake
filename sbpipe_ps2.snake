# snakemake pipeline
#
# Copyright (c) 2018 Piero Dalle Pezze
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


"""
Author: Piero Dalle Pezze
Description: A Snakemake workflow to process double parameter scans of a mathematical model.
Run: snakemake -s sbpipe_ps2.snake --configfile FILE
"""

import os


# Simulator
COPASI = False
if config['simulator'] == 'Copasi':
    COPASI = True

# Model and results folders
MODELS_FOLDER   = "Models"
MODEL           = os.path.join(MODELS_FOLDER , config['model'])
MODEL_NAME      = config['model'].split('.')[0]
REPORT_PREFIX   = "report_ps2_"
WORKING_FOLDER  = os.path.join("Results", MODEL_NAME)
CHECKING_FOLDER = "ps2_checking"
PREPROC_FOLDER  = "ps2_preproc"
POSTPROC_FOLDER = "ps2_postproc"
PLOTS_FOLDER    = "ps2_plots"

# Extensions
MODEL_EXT       = "." + config['model'].split('.')[1]
CSV_EXT         = ".csv"
LATEX_EXT       = ".tex"
TXT_EXT         = ".txt"
PDF_EXT         = ".pdf"
LOG_EXT         = ".log"

# Generate sequences
REPEATS     = range(1, int(config['runs'])+1)
TIME_POINTS = range(0, config['sim_length'])

# Report variables
VARIABLES = config['report_variables']

TASK_TYPE = 'Scan'


rule target:
    input: file=os.path.join(WORKING_FOLDER, REPORT_PREFIX + MODEL_NAME + PDF_EXT)


include: "./sbpipe_common.snake"


rule sbpipe_ps2_postproc:
    input:
        file=os.path.join(WORKING_FOLDER, PREPROC_FOLDER, MODEL_NAME + "_{rep}" + CSV_EXT)
    output:
        file=os.path.join(WORKING_FOLDER, POSTPROC_FOLDER, MODEL_NAME + "_{rep}" + CSV_EXT)
    params:
        sim_length=config["sim_length"],
        runs=config["runs"]
    run:
        from sbpipe.snakemake.ps2_postproc import ps2_postproc
        ps2_postproc(input.file,
                     output.file,
                     params.sim_length,
                     COPASI)


rule sbpipe_ps2_analysis_plot:
    input:
        # Run each repeat report as separate input
        file=os.path.join(WORKING_FOLDER, POSTPROC_FOLDER, MODEL_NAME + "_{rep}" + CSV_EXT)
    output:
        # {rep} is the previously defined wildcard. Therefore {{rep}}
        # {{rep}} ensures that no two rules want to write the same file.
        file=expand(os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "__eval_{var}__rep_{{rep}}__tp_{tp}" + PDF_EXT), tp=TIME_POINTS, var=VARIABLES)
    params:
        model_name=MODEL_NAME,
        scanned_par1=config["scanned_par1"],
        scanned_par2=config["scanned_par2"],
        postproc_dir=os.path.join(WORKING_FOLDER, POSTPROC_FOLDER),
        plots_dir=os.path.join(WORKING_FOLDER, PLOTS_FOLDER),
        repeat='{rep}'
    run:
        from sbpipe.snakemake.ps2_analysis import ps2_analyse_plot
        ps2_analyse_plot(params.model_name,
                         params.scanned_par1,
                         params.scanned_par2,
                         params.postproc_dir,
                         params.plots_dir,
                         params.repeat)



rule sbpipe_ps2_latex_report:
    input:
        file=expand(os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "__eval_{var}__rep_{rep}__tp_{tp}" + PDF_EXT), var=VARIABLES, rep=REPEATS, tp=TIME_POINTS)
    output:
        file=os.path.join(WORKING_FOLDER, REPORT_PREFIX + MODEL_NAME + LATEX_EXT)
    params:
        working_folder_dir=WORKING_FOLDER,
        plots_folder=PLOTS_FOLDER,
        report_prefix=REPORT_PREFIX,
        model_name=MODEL_NAME,
        scanned_par1=config["scanned_par1"],
        scanned_par2=config["scanned_par2"]
    run:
        from sbpipe.report.latex_reports import latex_report_ps2
        latex_report_ps2(params.working_folder_dir,
                         params.plots_folder,
                         params.report_prefix,
                         params.model_name,
                         params.scanned_par1,
                         params.scanned_par2)
