# snakemake pipeline
#
# This file is part of sbpipe.
#
# sbpipe is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# sbpipe is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with sbpipe.  If not, see <http://www.gnu.org/licenses/>.


"""
Author: Piero Dalle Pezze
Description: A Snakemake workflow to process double parameter scans of a mathematical model.
Run: snakemake -s sbpipe_ps2.snake --configfile FILE
"""

import sys
import os


# Simulator
COPASI = False
if config['simulator'] == 'Copasi':
    COPASI = True

# Model and results folders
MODELS_FOLDER   = "Models"
MODEL           = os.path.join(MODELS_FOLDER , config['model'])
MODEL_NAME      = config['model'].split('.')[0]
REPORT_PREFIX   = "report_ps2_"
WORKING_FOLDER  = os.path.join("Results", MODEL_NAME)
CHECKING_FOLDER = "ps2_checking"
PREPROC_FOLDER  = "ps2_preproc"
POSTPROC_FOLDER = "ps2_postproc"
PLOTS_FOLDER    = "ps2_plots"

# Extensions
MODEL_EXT       = "." + config['model'].split('.')[1]
CSV_EXT         = ".csv"
LATEX_EXT       = ".tex"
TXT_EXT         = ".txt"
PDF_EXT         = ".pdf"
LOG_EXT         = ".log"

# Generate sequences
REPEATS     = range(1, int(config['runs'])+1)
TIME_POINTS = range(0, config['sim_length'])

# Report variables
VARIABLES = config['report_variables']


rule sbpipe_pdf_report:
    input:
        file=os.path.join(WORKING_FOLDER, REPORT_PREFIX + MODEL_NAME + LATEX_EXT)
    output:
        file=os.path.join(WORKING_FOLDER, REPORT_PREFIX + MODEL_NAME + PDF_EXT)
    params:
        working_folder_dir=WORKING_FOLDER,
        latex_file=REPORT_PREFIX + MODEL_NAME + LATEX_EXT
    run:
        from sbpipe.report.latex_reports import pdf_report
        pdf_report(params.working_folder_dir,
                   params.latex_file)


rule sbpipe_model_checking:
    input:
        file=MODEL
    output:
        file=os.path.join(WORKING_FOLDER, CHECKING_FOLDER, MODEL_NAME + '_check' + TXT_EXT)
    run:
        # An output file must be generated, as this is required input for the rule
        # `sbpipe_preproc`.
        from sbpipe.utils.io import write_mat_on_file
        write_mat_on_file(output.file,
                          ['No control was performed on this model.'])
        if COPASI:
            from sbpipe.snakemake.model_checking import model_checking
            model_checking(input.file,
                           output.file,
                           'Scan')


rule sbpipe_preproc:
    input:
        file=MODEL,
        check=os.path.join(WORKING_FOLDER, CHECKING_FOLDER, MODEL_NAME + '_check' + TXT_EXT)
    output:
        file=os.path.join(WORKING_FOLDER, PREPROC_FOLDER, MODEL_NAME + "_{rep}" + MODEL_EXT)
    run:
        from sbpipe.snakemake.preproc import preproc
        preproc(input.file,
                output.file,
                COPASI)


rule sbpipe_gen_data:
    input:
        file=os.path.join(WORKING_FOLDER, PREPROC_FOLDER, MODEL_NAME + "_{rep}" + MODEL_EXT)
    output:
        file=os.path.join(WORKING_FOLDER, PREPROC_FOLDER, MODEL_NAME + "_{rep}" + CSV_EXT)
    run:
        from sbpipe.snakemake.data_generation import generate_data
        generate_data(input.file,
                      COPASI)


rule sbpipe_ps2_postproc:
    input:
        file=os.path.join(WORKING_FOLDER, PREPROC_FOLDER, MODEL_NAME + "_{rep}" + CSV_EXT)
    output:
        file=os.path.join(WORKING_FOLDER, POSTPROC_FOLDER, MODEL_NAME + "_{rep}" + CSV_EXT)
    params:
        sim_length=config["sim_length"],
        runs=config["runs"]
    run:
        from sbpipe.snakemake.ps2_postproc import ps2_postproc
        ps2_postproc(input.file,
                     output.file,
                     params.sim_length,
                     COPASI)


rule sbpipe_ps2_analysis_plot:
    input:
        # Run each repeat report as separate input
        file=os.path.join(WORKING_FOLDER, POSTPROC_FOLDER, MODEL_NAME + "_{rep}" + CSV_EXT)
    output:
        # {rep} is the previously defined wildcard. Therefore {{rep}}
        # {{rep}} ensures that no two rules want to write the same file.
        file=expand(os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "__eval_{var}__rep_{{rep}}__tp_{tp}" + PDF_EXT), tp=TIME_POINTS, var=VARIABLES)
    params:
        model_name=MODEL_NAME,
        scanned_par1=config["scanned_par1"],
        scanned_par2=config["scanned_par2"],
        postproc_dir=os.path.join(WORKING_FOLDER, POSTPROC_FOLDER),
        plots_dir=os.path.join(WORKING_FOLDER, PLOTS_FOLDER),
        repeat='{rep}'
    run:
        from sbpipe.snakemake.ps2_analysis import ps2_analyse_plot
        ps2_analyse_plot(params.model_name,
                         params.scanned_par1,
                         params.scanned_par2,
                         params.postproc_dir,
                         params.plots_dir,
                         params.repeat)



rule sbpipe_ps2_latex_report:
    input:
        file=expand(os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "__eval_{var}__rep_{rep}__tp_{tp}" + PDF_EXT), var=VARIABLES, rep=REPEATS, tp=TIME_POINTS)
    output:
        file=os.path.join(WORKING_FOLDER, REPORT_PREFIX + MODEL_NAME + LATEX_EXT)
    params:
        working_folder_dir=WORKING_FOLDER,
        plots_folder=PLOTS_FOLDER,
        report_prefix=REPORT_PREFIX,
        model_name=MODEL_NAME,
        scanned_par1=config["scanned_par1"],
        scanned_par2=config["scanned_par2"]
    run:
        from sbpipe.report.latex_reports import latex_report_ps2
        latex_report_ps2(params.working_folder_dir,
                         params.plots_folder,
                         params.report_prefix,
                         params.model_name,
                         params.scanned_par1,
                         params.scanned_par2)
