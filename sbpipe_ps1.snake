# snakemake pipeline
#
# Copyright (c) 2018 Piero Dalle Pezze
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


"""
Author: Piero Dalle Pezze
Description: A Snakemake workflow to process single parameter scans of a mathematical model.
Run: snakemake -s sbpipe_ps1.snake --configfile FILE
"""

import os


# Simulator
COPASI = False
if config['simulator'] == 'Copasi':
    COPASI = True

# Model and results folders
MODELS_FOLDER   = "Models"
MODEL           = os.path.join(MODELS_FOLDER , config['model'])
MODEL_NAME      = config['model'].split('.')[0]
REPORT_PREFIX   = "report_ps1_"
WORKING_FOLDER  = os.path.join("Results", MODEL_NAME)
CHECKING_FOLDER = "ps1_checking"
PREPROC_FOLDER  = "ps1_preproc"
POSTPROC_FOLDER = "ps1_postproc"
PLOTS_FOLDER    = "ps1_plots"

# Extensions
MODEL_EXT       = "." + config['model'].split('.')[1]
CSV_EXT         = ".csv"
LATEX_EXT       = ".tex"
TXT_EXT         = ".txt"
PDF_EXT         = ".pdf"
LOG_EXT         = ".log"

# Generate sequences
REPEATS     = range(1, int(config['runs'])+1)

# SCANNED PAR
SCANNED_PAR = config["scanned_par"]

# Report variables
VARIABLES = config['report_variables']

TASK_TYPE = 'Scan'


rule target:
    input: file=os.path.join(WORKING_FOLDER, REPORT_PREFIX + MODEL_NAME + PDF_EXT)


include: "./sbpipe_common.snake"


rule sbpipe_ps1_postproc:
    input:
        file=os.path.join(WORKING_FOLDER, PREPROC_FOLDER, MODEL_NAME + "_{rep}" + CSV_EXT)
    output:
        file=os.path.join(WORKING_FOLDER, POSTPROC_FOLDER, MODEL_NAME + "_{rep}" + CSV_EXT)
    params:
        scanned_par=SCANNED_PAR,
        sim_intervals=config["simulate__intervals"],
        ps1_intervals=config["levels_number"]
    run:
        from sbpipe.snakemake.ps1_postproc import ps1_postproc
        ps1_postproc(input.file,
                     output.file,
                     params.scanned_par,
                     params.sim_intervals,
                     params.ps1_intervals,
                     COPASI)


rule sbpipe_ps1_analysis_plot:
    input:
        file=os.path.join(WORKING_FOLDER, POSTPROC_FOLDER, MODEL_NAME + "_{rep}" + CSV_EXT)
    output:
        file=expand(os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "__rep_{{rep}}__eval_{var}" + PDF_EXT), var=VARIABLES)
    params:
        model_name=MODEL_NAME,
        inhibition_only=config["ps1_knock_down_only"],
        inputdir=os.path.join(WORKING_FOLDER, POSTPROC_FOLDER),
        outputdir=os.path.join(WORKING_FOLDER, PLOTS_FOLDER),
        repeat='{rep}',
        percent_levels=config["ps1_percent_levels"],
        min_level=config["min_level"],
        max_level=config["max_level"],
        levels_number=config["levels_number"],
        homogeneous_lines=config["homogeneous_lines"],
        xaxis_label=config["xaxis_label"],
        yaxis_label=config["yaxis_label"]
    run:
        if params.homogeneous_lines:
            from sbpipe.snakemake.ps1_analysis import ps1_analyse_plot_homogen
            ps1_analyse_plot_homogen(params.model_name,
                                     params.inputdir,
                                     params.outputdir,
                                     params.repeat,
                                     params.xaxis_label,
                                     params.yaxis_label)
        else:
            from sbpipe.snakemake.ps1_analysis import ps1_analyse_plot
            ps1_analyse_plot(params.model_name,
                             str(params.inhibition_only),
                             params.inputdir,
                             params.outputdir,
                             params.repeat,
                             str(params.percent_levels),
                             str(params.min_level),
                             str(params.max_level),
                             str(params.levels_number),
                             params.xaxis_label,
                             params.yaxis_label)


rule sbpipe_ps1_latex_report:
    input:
        file=expand(os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "__rep_{rep}__eval_{var}" + PDF_EXT), rep=REPEATS, var=VARIABLES)
    output:
        file=os.path.join(WORKING_FOLDER, REPORT_PREFIX + MODEL_NAME + LATEX_EXT)
    params:
        working_folder_dir=WORKING_FOLDER,
        plots_folder=PLOTS_FOLDER,
        report_prefix=REPORT_PREFIX,
        model_name=MODEL_NAME,
        scanned_par=SCANNED_PAR
    run:
        from sbpipe.report.latex_reports import latex_report_ps1
        latex_report_ps1(params.working_folder_dir,
                         params.plots_folder,
                         params.report_prefix,
                         params.model_name,
                         params.scanned_par)
