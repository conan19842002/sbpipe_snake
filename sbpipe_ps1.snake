# snakemake pipeline
#
# This file is part of sbpipe.
#
# sbpipe is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# sbpipe is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with sbpipe.  If not, see <http://www.gnu.org/licenses/>.


"""
Author: Piero Dalle Pezze
Description: A Snakemake workflow to process single parameter scans of a mathematical model.
Run: snakemake -s sbpipe_ps1.snake --configfile FILE
"""

import sys
import os


# Simulator
COPASI = False
if config['simulator'] == 'Copasi':
    COPASI = True

# Model and results folders
MODELS_FOLDER   = "Models"
MODEL           = os.path.join(MODELS_FOLDER , config['model'])
MODEL_NAME      = config['model'].split('.')[0]
REPORT_PREFIX   = "report_ps1_"
WORKING_FOLDER  = os.path.join("Results", MODEL_NAME)
CHECKING_FOLDER = "ps1_checking"
PREPROC_FOLDER  = "ps1_preproc"
POSTPROC_FOLDER = "ps1_postproc"
PLOTS_FOLDER    = "ps1_plots"

# Extensions
MODEL_EXT       = "." + config['model'].split('.')[1]
CSV_EXT         = ".csv"
LATEX_EXT       = ".tex"
TXT_EXT         = ".txt"
PDF_EXT         = ".pdf"
LOG_EXT         = ".log"

# Generate sequences
REPEATS     = range(1, int(config['runs'])+1)

# SCANNED PAR
SCANNED_PAR = config["scanned_par"]

# Report variables
VARIABLES = config['report_variables']


rule sbpipe_pdf_report:
    input:
        file=os.path.join(WORKING_FOLDER, REPORT_PREFIX + MODEL_NAME + LATEX_EXT)
    output:
        file=os.path.join(WORKING_FOLDER, REPORT_PREFIX + MODEL_NAME + PDF_EXT)
    params:
        working_folder_dir=WORKING_FOLDER,
        latex_file=REPORT_PREFIX + MODEL_NAME + LATEX_EXT
    run:
        from sbpipe.report.latex_reports import pdf_report
        pdf_report(params.working_folder_dir,
                   params.latex_file)


rule sbpipe_model_checking:
    input:
        file=MODEL
    output:
        file=os.path.join(WORKING_FOLDER, CHECKING_FOLDER, MODEL_NAME + '_check' + TXT_EXT)
    run:
        # An output file must be generated, as this is required input for the rule
        # `sbpipe_preproc`.
        from sbpipe.utils.io import write_mat_on_file
        write_mat_on_file(output.file,
                          ['No control was performed on this model.'])
        if COPASI:
            from sbpipe.snakemake.model_checking import model_checking
            model_checking(input.file,
                           output.file,
                           'Scan')


rule sbpipe_preproc:
    input:
        file=MODEL,
        check=os.path.join(WORKING_FOLDER, CHECKING_FOLDER, MODEL_NAME + '_check' + TXT_EXT)
    output:
        file=os.path.join(WORKING_FOLDER, PREPROC_FOLDER, MODEL_NAME + "_{rep}" + MODEL_EXT)
    run:
        from sbpipe.snakemake.preproc import preproc
        preproc(input.file,
                output.file,
                COPASI)


rule sbpipe_gen_data:
    input:
        file=os.path.join(WORKING_FOLDER, PREPROC_FOLDER, MODEL_NAME + "_{rep}" + MODEL_EXT)
    output:
        file=os.path.join(WORKING_FOLDER, PREPROC_FOLDER, MODEL_NAME + "_{rep}" + CSV_EXT)
    run:
        from sbpipe.snakemake.data_generation import generate_data
        generate_data(input.file,
                      COPASI)


rule sbpipe_ps1_postproc:
    input:
        file=os.path.join(WORKING_FOLDER, PREPROC_FOLDER, MODEL_NAME + "_{rep}" + CSV_EXT)
    output:
        file=os.path.join(WORKING_FOLDER, POSTPROC_FOLDER, MODEL_NAME + "_{rep}" + CSV_EXT)
    params:
        scanned_par=SCANNED_PAR,
        sim_intervals=config["simulate__intervals"],
        ps1_intervals=config["levels_number"]
    run:
        from sbpipe.snakemake.ps1_postproc import ps1_postproc
        ps1_postproc(input.file,
                     output.file,
                     params.scanned_par,
                     params.sim_intervals,
                     params.ps1_intervals,
                     COPASI)


rule sbpipe_ps1_analysis_plot:
    input:
        file=os.path.join(WORKING_FOLDER, POSTPROC_FOLDER, MODEL_NAME + "_{rep}" + CSV_EXT)
    output:
        file=expand(os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "__rep_{{rep}}__eval_{var}" + PDF_EXT), var=VARIABLES)
    params:
        model_name=MODEL_NAME,
        inhibition_only=config["ps1_knock_down_only"],
        inputdir=os.path.join(WORKING_FOLDER, POSTPROC_FOLDER),
        outputdir=os.path.join(WORKING_FOLDER, PLOTS_FOLDER),
        repeat='{rep}',
        percent_levels=config["ps1_percent_levels"],
        min_level=config["min_level"],
        max_level=config["max_level"],
        levels_number=config["levels_number"],
        homogeneous_lines=config["homogeneous_lines"],
        xaxis_label=config["xaxis_label"],
        yaxis_label=config["yaxis_label"]
    run:
        if params.homogeneous_lines:
            from sbpipe.snakemake.ps1_analysis import ps1_analyse_plot_homogen
            ps1_analyse_plot_homogen(params.model_name,
                                     params.inputdir,
                                     params.outputdir,
                                     params.repeat,
                                     params.xaxis_label,
                                     params.yaxis_label)
        else:
            from sbpipe.snakemake.ps1_analysis import ps1_analyse_plot
            ps1_analyse_plot(params.model_name,
                             str(params.inhibition_only),
                             params.inputdir,
                             params.outputdir,
                             params.repeat,
                             str(params.percent_levels),
                             str(params.min_level),
                             str(params.max_level),
                             str(params.levels_number),
                             params.xaxis_label,
                             params.yaxis_label)


rule sbpipe_ps1_latex_report:
    input:
        file=expand(os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "__rep_{rep}__eval_{var}" + PDF_EXT), rep=REPEATS, var=VARIABLES)
    output:
        file=os.path.join(WORKING_FOLDER, REPORT_PREFIX + MODEL_NAME + LATEX_EXT)
    params:
        working_folder_dir=WORKING_FOLDER,
        plots_folder=PLOTS_FOLDER,
        report_prefix=REPORT_PREFIX,
        model_name=MODEL_NAME,
        scanned_par=SCANNED_PAR
    run:
        from sbpipe.report.latex_reports import latex_report_ps1
        latex_report_ps1(params.working_folder_dir,
                         params.plots_folder,
                         params.report_prefix,
                         params.model_name,
                         params.scanned_par)
