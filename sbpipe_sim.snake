# snakemake pipeline
#
# This file is part of sbpipe.
#
# sbpipe is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# sbpipe is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with sbpipe.  If not, see <http://www.gnu.org/licenses/>.


"""
Author: Piero Dalle Pezze
Description: A Snakemake workflow to process Time Course simulation of a mathematical model.
Run: snakemake -s sbpipe_sim.snake --configfile FILE
"""

import os


# Simulator
COPASI = False
if config['simulator'] == 'Copasi':
    COPASI = True

# Model and results folders
MODELS_FOLDER          = "Models"
MODEL                  = os.path.join(MODELS_FOLDER , config['model'])
MODEL_NAME             = config['model'].split('.')[0]
REPORT_PREFIX          = "report_sim_"
WORKING_FOLDER         = os.path.join("Results", MODEL_NAME)
CHECKING_FOLDER        = "sim_checking"
PREPROC_FOLDER         = "sim_preproc"
POSTPROC_FOLDER        = "sim_postproc"
POSTPROC_BY_VAR_FOLDER = "sim_postproc_by_var"
STATS_FOLDER           = "sim_stats"
PLOTS_FOLDER           = "sim_plots"

# Extensions
MODEL_EXT       = "." + config['model'].split('.')[1]
CSV_EXT         = ".csv"
LATEX_EXT       = ".tex"
TXT_EXT         = ".txt"
PDF_EXT         = ".pdf"
LOG_EXT         = ".log"

# Generate sequences
REPEATS     = range(1, int(config['runs'])+1)

# Report variables
VARIABLES = config['report_variables']

COMB_PLOT_TYPES = ['_mean', '_mean_sd', '_mean_sd_ci95']

#if config['plot_exp_dataset']:
#    COMB_PLOT_TYPES = COMB_PLOT_TYPES + ['_mean_w_exp_data', '_mean_sd_w_exp_data', '_mean_sd_ci95_w_exp_data']

SEP_PLOT_TYPES = ['_heatmap', '_heatmap_scaled']


rule sbpipe_pdf_report:
    input:
        file=os.path.join(WORKING_FOLDER, REPORT_PREFIX + MODEL_NAME + LATEX_EXT)
    output:
        file=os.path.join(WORKING_FOLDER, REPORT_PREFIX + MODEL_NAME + PDF_EXT)
    params:
        working_folder_dir=WORKING_FOLDER,
        latex_file=REPORT_PREFIX + MODEL_NAME + LATEX_EXT
    run:
        from sbpipe.report.latex_reports import pdf_report
        pdf_report(params.working_folder_dir,
                   params.latex_file)


rule sbpipe_model_checking:
    input:
        file=MODEL
    output:
        file=os.path.join(WORKING_FOLDER, CHECKING_FOLDER, MODEL_NAME + '_check' + TXT_EXT)
    run:
        # An output file must be generated, as this is required input for the rule
        # `sbpipe_preproc`.
        from sbpipe.utils.io import write_mat_on_file
        write_mat_on_file(output.file,
                          ['No control was performed on this model.'])
        if COPASI:
            from sbpipe.snakemake.model_checking import model_checking
            model_checking(input.file,
                           output.file,
                           'Time-Course')


rule sbpipe_preproc:
    input:
        file=MODEL,
        check=os.path.join(WORKING_FOLDER, CHECKING_FOLDER, MODEL_NAME + '_check' + TXT_EXT)
    output:
        file=os.path.join(WORKING_FOLDER, PREPROC_FOLDER, MODEL_NAME + "_{rep}" + MODEL_EXT)
    run:
        from sbpipe.snakemake.preproc import preproc
        preproc(input.file,
                output.file,
                COPASI)


rule sbpipe_gen_data:
    input:
        file=os.path.join(WORKING_FOLDER, PREPROC_FOLDER, MODEL_NAME + "_{rep}" + MODEL_EXT)
    output:
        file=os.path.join(WORKING_FOLDER, PREPROC_FOLDER, MODEL_NAME + "_{rep}" + CSV_EXT)
    run:
        from sbpipe.snakemake.data_generation import generate_data
        generate_data(input.file,
                      COPASI)


rule sbpipe_sim_postproc:
    input:
        file=os.path.join(WORKING_FOLDER, PREPROC_FOLDER, MODEL_NAME + "_{rep}" + CSV_EXT)
    output:
        file=os.path.join(WORKING_FOLDER, POSTPROC_FOLDER, MODEL_NAME + "_{rep}" + CSV_EXT)
    run:
        from sbpipe.snakemake.sim_postproc import sim_postproc
        sim_postproc(input.file,
                     output.file,
                     COPASI)


rule sbpipe_sim_analysis_summarise_data:
    input:
        file=expand(os.path.join(WORKING_FOLDER, POSTPROC_FOLDER, MODEL_NAME + "_{rep}" + CSV_EXT), rep=REPEATS)
    output:
        file=os.path.join(WORKING_FOLDER, POSTPROC_BY_VAR_FOLDER, MODEL_NAME + "_{var}" + CSV_EXT)
    params:
        inputdir=os.path.join(WORKING_FOLDER, POSTPROC_FOLDER),
        model_name = MODEL_NAME,
        variable = '{var}'
    run:
        from sbpipe.snakemake.sim_analysis import sim_analyse_summarise_data
        sim_analyse_summarise_data(params.inputdir,
                                   params.model_name,
                                   output.file,
                                   params.variable)


rule sbpipe_sim_analysis_gen_stats_table:
    input:
        file=os.path.join(WORKING_FOLDER, POSTPROC_BY_VAR_FOLDER, MODEL_NAME + "_{var}" + CSV_EXT)
    output:
        file=os.path.join(WORKING_FOLDER, STATS_FOLDER, 'sim_stats_' + MODEL_NAME + '_{var}' + CSV_EXT)
    params:
        variable = '{var}'
    run:
        from sbpipe.snakemake.sim_analysis import sim_analyse_gen_stats_table
        sim_analyse_gen_stats_table(input.file,
                                    output.file,
                                    params.variable)


rule sbpipe_sim_analysis_plot_sep_sims:
    input:
        file=os.path.join(WORKING_FOLDER, POSTPROC_BY_VAR_FOLDER, MODEL_NAME + "_{var}" + CSV_EXT)
    output:
        # note: we mask var as a wildcard. Doing so, we can "replicate" this rule for each var in VARIABLES (see following rule input)
        # {{var}} ensures that no two rules want to write the same file.
        file=expand(os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_{{var}}{sep_plot}" + PDF_EXT), sep_plot=SEP_PLOT_TYPES)
    params:
        inputdir=os.path.join(WORKING_FOLDER, POSTPROC_BY_VAR_FOLDER),
        outputdir=os.path.join(WORKING_FOLDER, PLOTS_FOLDER),
        model_name=MODEL_NAME,
        dataset_file=os.path.join(MODELS_FOLDER, config["exp_dataset"]),
        plot_exp_dataset=config["plot_exp_dataset"],
        exp_dataset_alpha=config["exp_dataset_alpha"],
        xaxis_label=config["xaxis_label"],
        yaxis_label=config["yaxis_label"],
        variable = '{var}'
    run:
        from sbpipe.snakemake.sim_analysis import sim_analyse_plot_sep_sims
        sim_analyse_plot_sep_sims(params.inputdir,
                                  params.outputdir,
                                  params.model_name,
                                  params.dataset_file,
                                  str(params.plot_exp_dataset),
                                  str(params.exp_dataset_alpha),
                                  params.xaxis_label,
                                  params.yaxis_label,
                                  params.variable)


rule sbpipe_sim_analysis_plot_comb_sims:
    input:
        file=os.path.join(WORKING_FOLDER, POSTPROC_BY_VAR_FOLDER, MODEL_NAME + "_{var}" + CSV_EXT)
    output:
        # note: we mask var as a wildcard. Doing so, we can "replicate" this rule for each var in VARIABLES (see following rule input)
        # {{var}} ensures that no two rules want to write the same file.
        file=expand(os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_{{var}}{comb_plot}" + PDF_EXT), comb_plot=COMB_PLOT_TYPES)
    params:
        inputdir=os.path.join(WORKING_FOLDER, POSTPROC_BY_VAR_FOLDER),
        outputdir=os.path.join(WORKING_FOLDER, PLOTS_FOLDER),
        model_name=MODEL_NAME,
        dataset_file=os.path.join(MODELS_FOLDER, config["exp_dataset"]),
        plot_exp_dataset=config["plot_exp_dataset"],
        exp_dataset_alpha=config["exp_dataset_alpha"],
        xaxis_label=config["xaxis_label"],
        yaxis_label=config["yaxis_label"],
        variable = '{var}'
    run:
        from sbpipe.snakemake.sim_analysis import sim_analyse_plot_comb_sims
        sim_analyse_plot_comb_sims(params.inputdir,
                                   params.outputdir,
                                   params.model_name,
                                   params.dataset_file,
                                   str(params.plot_exp_dataset),
                                   str(params.exp_dataset_alpha),
                                   params.xaxis_label,
                                   params.yaxis_label,
                                   params.variable)


rule sbpipe_sim_latex_report:
    input:
        file_stats = expand(os.path.join(WORKING_FOLDER, STATS_FOLDER, 'sim_stats_' + MODEL_NAME + '_{var}' + CSV_EXT), var=VARIABLES),
        plots_sep=expand(os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_{var}{sep_plot}" + PDF_EXT), var=VARIABLES, sep_plot=SEP_PLOT_TYPES),
        plots_comb=expand(os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_{var}{comb_plot}" + PDF_EXT), var=VARIABLES, comb_plot=COMB_PLOT_TYPES)
    output:
        file=os.path.join(WORKING_FOLDER, REPORT_PREFIX + MODEL_NAME + LATEX_EXT)
    params:
        working_folder_dir=WORKING_FOLDER,
        plots_folder=PLOTS_FOLDER,
        report_prefix=REPORT_PREFIX,
        model_name=MODEL_NAME
    run:
        from sbpipe.report.latex_reports import latex_report_sim
        latex_report_sim(params.working_folder_dir,
                         params.plots_folder,
                         params.model_name,
                         params.report_prefix)
