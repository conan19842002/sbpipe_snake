# snakemake pipeline
#
# This file is part of sbpipe.
#
# sbpipe is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# sbpipe is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with sbpipe.  If not, see <http://www.gnu.org/licenses/>.


"""
Author: Piero Dalle Pezze
Description: A Snakemake workflow to process parameter estimations for a mathematical model.
Run: snakemake -s sbpipe_pe.snake --configfile FILE
"""

import sys
import os


# Simulator
COPASI = False
if config['simulator'] == 'Copasi':
    COPASI = True

# Model and results folders
MODELS_FOLDER   = "Models"
MODEL           = os.path.join(MODELS_FOLDER , config['model'])
MODEL_NAME      = config['model'].split('.')[0]
REPORT_PREFIX   = "report_pe_"
WORKING_FOLDER  = os.path.join("Results", MODEL_NAME)
CHECKING_FOLDER = "pe_checking"
PREPROC_FOLDER  = "pe_preproc"
POSTPROC_FOLDER = "pe_postproc"
PLOTS_FOLDER    = "pe_plots"

# Files
FILE_FINAL_ESTIM                   = "final_estim_collection"
FILE_ALL_ESTIM                     = "all_estim_collection"
FILE_PARAM_ESTIM_BEST_FITS_DETAILS = "param_estim_best_fits_details"
FILE_PARAM_ESTIM_DETAILS           = "param_estim_details"
FILE_PARAM_ESTIM_SUMMARY           = "param_estim_summary"

# Extensions
MODEL_EXT       = "." + config['model'].split('.')[1]
CSV_EXT         = ".csv"
LATEX_EXT       = ".tex"
TXT_EXT         = ".txt"
PDF_EXT         = ".pdf"
LOG_EXT         = ".log"

# Generate sequences
REPEATS     = range(1, int(config['runs'])+1)

# Report variables
VARIABLES = config['report_variables']

# These are used for the 2D PLE analysis
VARIABLES_2D = []
for idx, var1 in enumerate(VARIABLES):
    for var2 in VARIABLES[idx + 1:]:
        VARIABLES_2D.append(var1 + '_' + var2)

EXP_DATASET = config["exp_dataset"]



rule sbpipe_pdf_report:
    input:
        file=os.path.join(WORKING_FOLDER, REPORT_PREFIX + MODEL_NAME + LATEX_EXT)
    output:
        file=os.path.join(WORKING_FOLDER, REPORT_PREFIX + MODEL_NAME + PDF_EXT)
    params:
        working_folder_dir=WORKING_FOLDER,
        latex_file=REPORT_PREFIX + MODEL_NAME + LATEX_EXT
    run:
        from sbpipe.report.latex_reports import pdf_report
        pdf_report(params.working_folder_dir,
                   params.latex_file)


rule copy_dataset:
    input:
        exp_dataset=os.path.join(MODELS_FOLDER, "{ds}")
    output:
        exp_dataset=os.path.join(WORKING_FOLDER, PREPROC_FOLDER, "{ds}")
    run:
        from shutil import copyfile
        copyfile(input.exp_dataset,
                 output.exp_dataset)


rule sbpipe_model_checking:
    input:
        file=MODEL
    output:
        file=os.path.join(WORKING_FOLDER, CHECKING_FOLDER, MODEL_NAME + '_check' + TXT_EXT)
    run:
        # An output file must be generated, as this is required input for the rule
        # `sbpipe_preproc`.
        from sbpipe.utils.io import write_mat_on_file
        write_mat_on_file(output.file,
                          ['No control was performed on this model.'])
        if COPASI:
            from sbpipe.snakemake.model_checking import model_checking
            model_checking(input.file,
                           output.file,
                           'Parameter Estimation')


rule sbpipe_preproc:
    input:
        file=MODEL,
        check=os.path.join(WORKING_FOLDER, CHECKING_FOLDER, MODEL_NAME + '_check' + TXT_EXT)
    output:
        file=os.path.join(WORKING_FOLDER, PREPROC_FOLDER, MODEL_NAME + "_{rep}" + MODEL_EXT)
    run:
        from sbpipe.snakemake.preproc import preproc
        preproc(input.file,
                output.file,
                COPASI)


rule sbpipe_gen_data:
    input:
        exp_dataset=expand(os.path.join(WORKING_FOLDER, PREPROC_FOLDER, "{ds}"), ds=EXP_DATASET),
        file=os.path.join(WORKING_FOLDER, PREPROC_FOLDER, MODEL_NAME + "_{rep}" + MODEL_EXT)
    output:
        file=os.path.join(WORKING_FOLDER, PREPROC_FOLDER, MODEL_NAME + "_{rep}" + CSV_EXT)
    run:
        from sbpipe.snakemake.data_generation import generate_data
        generate_data(input.file,
                      COPASI)


rule sbpipe_pe_postproc:
    input:
        file=os.path.join(WORKING_FOLDER, PREPROC_FOLDER, MODEL_NAME + "_{rep}" + CSV_EXT)
    output:
        file=os.path.join(WORKING_FOLDER, POSTPROC_FOLDER, MODEL_NAME + "_{rep}" + CSV_EXT)
    run:
        from sbpipe.snakemake.pe_postproc import pe_postproc
        pe_postproc(input.file,
                    output.file,
                    COPASI)


rule sbpipe_pe_collect:
    input:
        file=expand(os.path.join(WORKING_FOLDER, POSTPROC_FOLDER, MODEL_NAME + "_{rep}" + CSV_EXT), rep=REPEATS)
    output:
        file_best_fits=os.path.join(WORKING_FOLDER, FILE_FINAL_ESTIM + CSV_EXT),
        file_all_fits=os.path.join(WORKING_FOLDER, FILE_ALL_ESTIM + CSV_EXT)
    params:
        inputdir=os.path.join(WORKING_FOLDER, POSTPROC_FOLDER),
        outputdir=WORKING_FOLDER
    run:
        from sbpipe.snakemake.pe_collection import pe_collect
        pe_collect(params.inputdir,
                   params.outputdir,
                   os.path.basename(output.file_best_fits),
                   os.path.basename(output.file_all_fits))


rule sbpipe_pe_ds_preproc_final_estims:
    input:
        file=os.path.join(WORKING_FOLDER, FILE_FINAL_ESTIM + CSV_EXT)
    output:
        file_best_fits=os.path.join(WORKING_FOLDER, FILE_FINAL_ESTIM + "_log10" + CSV_EXT) if config['logspace'] else os.path.join(WORKING_FOLDER, FILE_FINAL_ESTIM + CSV_EXT)
    params:
        param_names=VARIABLES,
        logspace=config['logspace'],
        all_fits=False
    run:
        from sbpipe.snakemake.pe_analysis import pe_ds_preproc
        pe_ds_preproc(input.file,
                      params.param_names,
                      params.logspace,
                      params.all_fits)


rule sbpipe_pe_ds_preproc_all_estims:
    input:
        file=os.path.join(WORKING_FOLDER, FILE_ALL_ESTIM + CSV_EXT)
    output:
        file_all_fits=os.path.join(WORKING_FOLDER, FILE_ALL_ESTIM + "_log10" + CSV_EXT) if config['logspace'] else os.path.join(WORKING_FOLDER, FILE_ALL_ESTIM + CSV_EXT),
        file_param_estim_summary=os.path.join(WORKING_FOLDER, FILE_PARAM_ESTIM_SUMMARY + CSV_EXT)
    params:
        param_names=VARIABLES,
        logspace=config['logspace'],
        all_fits=True,
        data_point_num=config['data_point_num']
    run:
        from sbpipe.snakemake.pe_analysis import pe_ds_preproc
        pe_ds_preproc(input.file,
                      params.param_names,
                      params.logspace,
                      params.all_fits,
                      params.data_point_num,
                      output.file_param_estim_summary)


rule sbpipe_pe_sampled_ple_analysis:
    input:
        file_param_estim_summary=os.path.join(WORKING_FOLDER, FILE_PARAM_ESTIM_SUMMARY + CSV_EXT),
        file_all_fits=os.path.join(WORKING_FOLDER, FILE_ALL_ESTIM + "_log10" + CSV_EXT) if config['logspace'] else os.path.join(WORKING_FOLDER, FILE_ALL_ESTIM + CSV_EXT)
    output:
        approx_ple_plot=os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_approx_ple_{var}" + PDF_EXT),
        approx_ple_csv = os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_approx_ple_{var}" + CSV_EXT)
    params:
        model=MODEL_NAME,
        parameter="{var}",
        plots_dir=os.path.join(WORKING_FOLDER, PLOTS_FOLDER),
        logspace=config['logspace'],
        scientific_notation = config['scientific_notation']
    run:
        from sbpipe.snakemake.pe_analysis import pe_sampled_ple_analysis
        pe_sampled_ple_analysis(params.model,
                                input.file_all_fits,
                                params.parameter,
                                params.plots_dir,
                                input.file_param_estim_summary,
                                params.logspace,
                                params.scientific_notation)


rule sbpipe_pe_combine_param_ple_stats:
    input:
        approx_ple_csv=expand(os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_approx_ple_{var}" + CSV_EXT), var=VARIABLES)
    output:
        file_param_estim_details=os.path.join(WORKING_FOLDER, FILE_PARAM_ESTIM_DETAILS + CSV_EXT)
    params:
        plots_dir=os.path.join(WORKING_FOLDER, PLOTS_FOLDER)
    run:
        from sbpipe.snakemake.pe_analysis import pe_combine_param_ple_stats
        pe_combine_param_ple_stats(params.plots_dir,
                                   output.file_param_estim_details)


rule sbpipe_parameter_density_analysis_final_estim:
    input:
        file_best_fits=os.path.join(WORKING_FOLDER, FILE_FINAL_ESTIM + "_log10" + CSV_EXT) if config['logspace'] else os.path.join(WORKING_FOLDER, FILE_FINAL_ESTIM + CSV_EXT)
    output:
        best_fits_plot=os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_best_fits_{var}" + PDF_EXT),
        best_fits_csv=os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_best_fits_{var}" + CSV_EXT)
    params:
        model = MODEL_NAME,
        parameter = "{var}",
        plots_dir=os.path.join(WORKING_FOLDER, PLOTS_FOLDER),
        thres="BestFits",
        best_fits_percent = config['best_fits_percent'],
        logspace = config['logspace'],
        scientific_notation = config['scientific_notation']
    run:
        from sbpipe.snakemake.pe_analysis import pe_parameter_density_analysis
        pe_parameter_density_analysis(params.model,
                                      input.file_best_fits,
                                      params.parameter,
                                      params.plots_dir,
                                      params.thres,
                                      params.best_fits_percent,
                                      "",
                                      params.logspace,
                                      params.scientific_notation)


rule sbpipe_pe_combine_param_best_fits_stats:
    input:
        best_fits_csv=expand(os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_best_fits_{var}" + CSV_EXT), var=VARIABLES)
    output:
        file_param_estim_best_fits_details=os.path.join(WORKING_FOLDER, FILE_PARAM_ESTIM_BEST_FITS_DETAILS + CSV_EXT)
    params:
        plots_dir=os.path.join(WORKING_FOLDER, PLOTS_FOLDER)
    run:
        from sbpipe.snakemake.pe_analysis import pe_combine_param_best_fits_stats
        pe_combine_param_best_fits_stats(params.plots_dir,
                                         output.file_param_estim_best_fits_details)


rule sbpipe_parameter_pca_analysis_final_estim:
    input:
        file_best_fits=os.path.join(WORKING_FOLDER, FILE_FINAL_ESTIM + "_log10" + CSV_EXT) if config['logspace'] else os.path.join(WORKING_FOLDER, FILE_FINAL_ESTIM + CSV_EXT)
    output:
        pca_plot=os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_eigenvalues" + PDF_EXT)
    params:
        model = MODEL_NAME,
        plots_dir=os.path.join(WORKING_FOLDER, PLOTS_FOLDER),
        best_fits_percent = config['best_fits_percent']
    run:
        from sbpipe.snakemake.pe_analysis import pe_parameter_pca_analysis
        pe_parameter_pca_analysis(params.model,
                                  input.file_best_fits,
                                  params.plots_dir,
                                  params.best_fits_percent)


rule sbpipe_parameter_density_analysis_cl66_fits_estim:
    input:
        file_all_fits=os.path.join(WORKING_FOLDER, FILE_ALL_ESTIM + "_log10" + CSV_EXT) if config['logspace'] else os.path.join(
    WORKING_FOLDER, FILE_ALL_ESTIM + CSV_EXT),
        file_param_estim_summary=os.path.join(WORKING_FOLDER, FILE_PARAM_ESTIM_SUMMARY + CSV_EXT)
    output:
        cl66_plot=os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_cl66_fits_{var}" + PDF_EXT)
    params:
        model = MODEL_NAME,
        parameter = "{var}",
        plots_dir=os.path.join(WORKING_FOLDER, PLOTS_FOLDER),
        thres="CL66",
        best_fits_percent = config['best_fits_percent'],
        logspace = config['logspace'],
        scientific_notation = config['scientific_notation']
    run:
        from sbpipe.snakemake.pe_analysis import pe_parameter_density_analysis
        pe_parameter_density_analysis(params.model,
                                      input.file_all_fits,
                                      params.parameter,
                                      params.plots_dir,
                                      params.thres,
                                      params.best_fits_percent,
                                      input.file_param_estim_summary,
                                      params.logspace,
                                      params.scientific_notation)


rule sbpipe_parameter_density_analysis_cl95_fits_estim:
    input:
        file_all_fits=os.path.join(WORKING_FOLDER, FILE_ALL_ESTIM + "_log10" + CSV_EXT) if config['logspace'] else os.path.join(
    WORKING_FOLDER, FILE_ALL_ESTIM + CSV_EXT),
        file_param_estim_summary=os.path.join(WORKING_FOLDER, FILE_PARAM_ESTIM_SUMMARY + CSV_EXT)
    output:
        cl95_plot=os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_cl95_fits_{var}" + PDF_EXT)
    params:
        model = MODEL_NAME,
        parameter = "{var}",
        plots_dir=os.path.join(WORKING_FOLDER, PLOTS_FOLDER),
        thres="CL95",
        best_fits_percent = config['best_fits_percent'],
        logspace = config['logspace'],
        scientific_notation = config['scientific_notation']
    run:
        from sbpipe.snakemake.pe_analysis import pe_parameter_density_analysis
        pe_parameter_density_analysis(params.model,
                                      input.file_all_fits,
                                      params.parameter,
                                      params.plots_dir,
                                      params.thres,
                                      params.best_fits_percent,
                                      input.file_param_estim_summary,
                                      params.logspace,
                                      params.scientific_notation)


rule sbpipe_parameter_density_analysis_cl99_fits_estim:
    input:
        file_all_fits=os.path.join(WORKING_FOLDER, FILE_ALL_ESTIM + "_log10" + CSV_EXT) if config['logspace'] else os.path.join(
    WORKING_FOLDER, FILE_ALL_ESTIM + CSV_EXT),
        file_param_estim_summary=os.path.join(WORKING_FOLDER, FILE_PARAM_ESTIM_SUMMARY + CSV_EXT)
    output:
        cl99_plot=os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_cl99_fits_{var}" + PDF_EXT)
    params:
        model = MODEL_NAME,
        parameter = "{var}",
        plots_dir=os.path.join(WORKING_FOLDER, PLOTS_FOLDER),
        thres="CL99",
        best_fits_percent = config['best_fits_percent'],
        logspace = config['logspace'],
        scientific_notation = config['scientific_notation']
    run:
        from sbpipe.snakemake.pe_analysis import pe_parameter_density_analysis
        pe_parameter_density_analysis(params.model,
                                      input.file_all_fits,
                                      params.parameter,
                                      params.plots_dir,
                                      params.thres,
                                      params.best_fits_percent,
                                      input.file_param_estim_summary,
                                      params.logspace,
                                      params.scientific_notation)


if config['plot_2d_all_corr']:
    rule sbpipe_parameter_density_analysis_all_fits_estim:
        input:
            file_all_fits=os.path.join(WORKING_FOLDER, FILE_ALL_ESTIM + "_log10" + CSV_EXT) if config['logspace'] else os.path.join(
        WORKING_FOLDER, FILE_ALL_ESTIM + CSV_EXT),
            file_param_estim_summary=os.path.join(WORKING_FOLDER, FILE_PARAM_ESTIM_SUMMARY + CSV_EXT)
        output:
            all_plot=os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_all_fits_{var}" + PDF_EXT)
        params:
            model = MODEL_NAME,
            parameter = "{var}",
            plots_dir=os.path.join(WORKING_FOLDER, PLOTS_FOLDER),
            thres="All",
            best_fits_percent = config['best_fits_percent'],
            logspace = config['logspace'],
            scientific_notation = config['scientific_notation']
        run:
            from sbpipe.snakemake.pe_analysis import pe_parameter_density_analysis
            pe_parameter_density_analysis(params.model,
                                          input.file_all_fits,
                                          params.parameter,
                                          params.plots_dir,
                                          params.thres,
                                          params.best_fits_percent,
                                          input.file_param_estim_summary,
                                          params.logspace,
                                          params.scientific_notation)


rule sbpipe_sampled_2d_ple_analysis_final_estim:
    input:
        file_best_fits=os.path.join(WORKING_FOLDER, FILE_FINAL_ESTIM + "_log10" + CSV_EXT) if config['logspace'] else os.path.join(WORKING_FOLDER, FILE_FINAL_ESTIM + CSV_EXT)
    output:
        ple2d_best_fits_plot=os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_ple_2d_best_fits_{var1_var2}" + PDF_EXT)
    params:
        model = MODEL_NAME,
        parameters = "{var1_var2}",
        plots_dir=os.path.join(WORKING_FOLDER, PLOTS_FOLDER),
        thres="BestFits",
        best_fits_percent = config['best_fits_percent'],
        logspace = config['logspace'],
        scientific_notation = config['scientific_notation']
    run:
        from sbpipe.snakemake.pe_analysis import pe_sampled_2d_ple_analysis
        parameter1, parameter2 = params.parameters.split('_')
        pe_sampled_2d_ple_analysis(params.model,
                                   input.file_best_fits,
                                   parameter1,
                                   parameter2,
                                   params.plots_dir,
                                   params.thres,
                                   params.best_fits_percent,
                                   "",
                                   params.logspace,
                                   params.scientific_notation)


if config['plot_2d_66cl_corr']:
    rule sbpipe_sampled_2d_ple_analysis_cl66_fits__estim:
        input:
            file_all_fits=os.path.join(WORKING_FOLDER, FILE_ALL_ESTIM + "_log10" + CSV_EXT) if config['logspace'] else os.path.join(
        WORKING_FOLDER, FILE_ALL_ESTIM + CSV_EXT),
            file_param_estim_summary=os.path.join(WORKING_FOLDER, FILE_PARAM_ESTIM_SUMMARY + CSV_EXT)
        output:
            ple2d_cl66_fits_plot=os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_ple_2d_cl66_fits_{var1_var2}" + PDF_EXT)
        params:
            model = MODEL_NAME,
            parameters = "{var1_var2}",
            plots_dir=os.path.join(WORKING_FOLDER, PLOTS_FOLDER),
            thres="CL66",
            best_fits_percent = config['best_fits_percent'],
            logspace = config['logspace'],
            scientific_notation = config['scientific_notation']
        run:
            from sbpipe.snakemake.pe_analysis import pe_sampled_2d_ple_analysis
            parameter1, parameter2 = params.parameters.split('_')
            pe_sampled_2d_ple_analysis(params.model,
                                       input.file_all_fits,
                                       parameter1,
                                       parameter2,
                                       params.plots_dir,
                                       params.thres,
                                       params.best_fits_percent,
                                       input.file_param_estim_summary,
                                       params.logspace,
                                       params.scientific_notation)


if config['plot_2d_95cl_corr']:
    rule sbpipe_sampled_2d_ple_analysis_cl95_fits__estim:
        input:
            file_all_fits=os.path.join(WORKING_FOLDER, FILE_ALL_ESTIM + "_log10" + CSV_EXT) if config['logspace'] else os.path.join(
        WORKING_FOLDER, FILE_ALL_ESTIM + CSV_EXT),
            file_param_estim_summary=os.path.join(WORKING_FOLDER, FILE_PARAM_ESTIM_SUMMARY + CSV_EXT)
        output:
            ple2d_cl95_fits_plot=os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_ple_2d_cl95_fits_{var1_var2}" + PDF_EXT)
        params:
            model = MODEL_NAME,
            parameters = "{var1_var2}",
            plots_dir=os.path.join(WORKING_FOLDER, PLOTS_FOLDER),
            thres="CL95",
            best_fits_percent = config['best_fits_percent'],
            logspace = config['logspace'],
            scientific_notation = config['scientific_notation']
        run:
            from sbpipe.snakemake.pe_analysis import pe_sampled_2d_ple_analysis
            parameter1, parameter2 = params.parameters.split('_')
            pe_sampled_2d_ple_analysis(params.model,
                                       input.file_all_fits,
                                       parameter1,
                                       parameter2,
                                       params.plots_dir,
                                       params.thres,
                                       params.best_fits_percent,
                                       input.file_param_estim_summary,
                                       params.logspace,
                                       params.scientific_notation)


if config['plot_2d_99cl_corr']:
    rule sbpipe_sampled_2d_ple_analysis_cl99_fits__estim:
        input:
            file_all_fits=os.path.join(WORKING_FOLDER, FILE_ALL_ESTIM + "_log10" + CSV_EXT) if config['logspace'] else os.path.join(
        WORKING_FOLDER, FILE_ALL_ESTIM + CSV_EXT),
            file_param_estim_summary=os.path.join(WORKING_FOLDER, FILE_PARAM_ESTIM_SUMMARY + CSV_EXT)
        output:
            ple2d_cl99_fits_plot=os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_ple_2d_cl99_fits_{var1_var2}" + PDF_EXT)
        params:
            model = MODEL_NAME,
            parameters = "{var1_var2}",
            plots_dir=os.path.join(WORKING_FOLDER, PLOTS_FOLDER),
            thres="CL99",
            best_fits_percent = config['best_fits_percent'],
            logspace = config['logspace'],
            scientific_notation = config['scientific_notation']
        run:
            from sbpipe.snakemake.pe_analysis import pe_sampled_2d_ple_analysis
            parameter1, parameter2 = params.parameters.split('_')
            pe_sampled_2d_ple_analysis(params.model,
                                       input.file_all_fits,
                                       parameter1,
                                       parameter2,
                                       params.plots_dir,
                                       params.thres,
                                       params.best_fits_percent,
                                       input.file_param_estim_summary,
                                       params.logspace,
                                       params.scientific_notation)


if config['plot_2d_all_corr']:
    rule sbpipe_sampled_2d_ple_analysis_all_fits__estim:
        input:
            file_all_fits=os.path.join(WORKING_FOLDER, FILE_ALL_ESTIM + "_log10" + CSV_EXT) if config['logspace'] else os.path.join(
        WORKING_FOLDER, FILE_ALL_ESTIM + CSV_EXT),
            file_param_estim_summary=os.path.join(WORKING_FOLDER, FILE_PARAM_ESTIM_SUMMARY + CSV_EXT)
        output:
            ple2d_all_fits_plot=os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_ple_2d_all_fits_{var1_var2}" + PDF_EXT)
        params:
            model = MODEL_NAME,
            parameters = "{var1_var2}",
            plots_dir=os.path.join(WORKING_FOLDER, PLOTS_FOLDER),
            thres="All",
            best_fits_percent = config['best_fits_percent'],
            logspace = config['logspace'],
            scientific_notation = config['scientific_notation']
        run:
            from sbpipe.snakemake.pe_analysis import pe_sampled_2d_ple_analysis
            parameter1, parameter2 = params.parameters.split('_')
            pe_sampled_2d_ple_analysis(params.model,
                                       input.file_all_fits,
                                       parameter1,
                                       parameter2,
                                       params.plots_dir,
                                       params.thres,
                                       params.best_fits_percent,
                                       input.file_param_estim_summary,
                                       params.logspace,
                                       params.scientific_notation)


rule sbpipe_objval_vs_iters_analysis:
    input:
        file_all_fits=os.path.join(WORKING_FOLDER, FILE_ALL_ESTIM + "_log10" + CSV_EXT) if config['logspace'] else os.path.join(
    WORKING_FOLDER, FILE_ALL_ESTIM + CSV_EXT)
    output:
        objval_vs_iters_plot=os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_objval_vs_iter" + PDF_EXT)
    params:
        model = MODEL_NAME,
        plots_dir=os.path.join(WORKING_FOLDER, PLOTS_FOLDER)
    run:
        from sbpipe.snakemake.pe_analysis import pe_objval_vs_iters_analysis
        pe_objval_vs_iters_analysis(params.model,
                                    input.file_all_fits,
                                    params.plots_dir)


rule sbpipe_pe_latex_report:
    input:
        file_best_fits_log10 = os.path.join(WORKING_FOLDER, FILE_FINAL_ESTIM + "_log10" + CSV_EXT) if config[
            'logspace'] else os.path.join(WORKING_FOLDER, FILE_FINAL_ESTIM + CSV_EXT),
        file_all_fits_log10 = os.path.join(WORKING_FOLDER, FILE_ALL_ESTIM + "_log10" + CSV_EXT) if config[
            'logspace'] else os.path.join(WORKING_FOLDER, FILE_ALL_ESTIM + CSV_EXT),
        file_param_estim_summary = os.path.join(WORKING_FOLDER, "param_estim_summary" + CSV_EXT),
        file_param_estim_details = os.path.join(WORKING_FOLDER, FILE_PARAM_ESTIM_DETAILS + CSV_EXT),
        file_param_estim_best_fits_details=os.path.join(WORKING_FOLDER, FILE_PARAM_ESTIM_BEST_FITS_DETAILS + CSV_EXT),
        pca_plot = os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_eigenvalues" + PDF_EXT),
        approx_ple_plot = expand(os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_approx_ple_{var}" + PDF_EXT),
                                 var=VARIABLES),
        best_fits_plot = expand(os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_best_fits_{var}" + PDF_EXT),
                                var=VARIABLES),
        cl66_plot = expand(os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_cl66_fits_{var}" + PDF_EXT),
                           var=VARIABLES),
        cl95_plot = expand(os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_cl95_fits_{var}" + PDF_EXT),
                           var=VARIABLES),
        cl99_plot = expand(os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_cl99_fits_{var}" + PDF_EXT),
                           var=VARIABLES),
        all_plot = expand(os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_all_fits_{var}" + PDF_EXT), var=VARIABLES) if config['plot_2d_all_corr'] else os.path.join(WORKING_FOLDER, "param_estim_summary" + CSV_EXT),
        ple2d_best_fits_plot = expand(
            os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_ple_2d_best_fits_{var1_var2}" + PDF_EXT),
            var1_var2=VARIABLES_2D),
        ple2d_cl66_fits_plot = expand(
            os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_ple_2d_cl66_fits_{var1_var2}" + PDF_EXT),
            var1_var2=VARIABLES_2D) if config['plot_2d_66cl_corr'] else os.path.join(WORKING_FOLDER, "param_estim_summary" + CSV_EXT),
        ple2d_cl95_fits_plot = expand(
            os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_ple_2d_cl95_fits_{var1_var2}" + PDF_EXT),
            var1_var2=VARIABLES_2D) if config['plot_2d_95cl_corr'] else os.path.join(WORKING_FOLDER, "param_estim_summary" + CSV_EXT),
        ple2d_cl99_fits_plot = expand(
            os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_ple_2d_cl99_fits_{var1_var2}" + PDF_EXT),
            var1_var2=VARIABLES_2D) if config['plot_2d_99cl_corr'] else os.path.join(WORKING_FOLDER, "param_estim_summary" + CSV_EXT),
        ple2d_all_fits_plot = expand(
            os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_ple_2d_all_fits_{var1_var2}" + PDF_EXT),
            var1_var2=VARIABLES_2D) if config['plot_2d_all_corr'] else os.path.join(WORKING_FOLDER, "param_estim_summary" + CSV_EXT),
        objval_vs_iters_plot = os.path.join(WORKING_FOLDER, PLOTS_FOLDER, MODEL_NAME + "_objval_vs_iter" + PDF_EXT)
    output:
        file=os.path.join(WORKING_FOLDER, REPORT_PREFIX + MODEL_NAME + LATEX_EXT)
    params:
        working_folder_dir=WORKING_FOLDER,
        plots_folder=PLOTS_FOLDER,
        report_prefix=REPORT_PREFIX,
        model_name=MODEL_NAME
    run:
        from sbpipe.report.latex_reports import latex_report_pe
        latex_report_pe(params.working_folder_dir,
                        params.plots_folder,
                        params.model_name,
                        params.report_prefix)
